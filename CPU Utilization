You are a DevOps Engineer who hosts a web application. The application has to run across multiple availability zones for high availability. It must automatically scale out when the CPU usage exceeds 60% and scale in when it drops below 30%.
System should use AWS EC2 instance with Amazon Linux2, an application load balancer, VPC with public subnets in 2 availability zones. In autoscaling group that maintains 2-5 instances. Launch a template and a target group for an Application LoadBalancer health check.


{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Highly Available AutoScaling Web App with ALB and CPU-based Scaling",
    "Resources": {
      "VPC": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": "10.0.0.0/16",
          "EnableDnsSupport": true,
          "EnableDnsHostnames": true,
          "Tags": [{ "Key": "Name", "Value": "WebAppVPC" }]
        }
      },
      "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway"
      },
      "AttachGateway": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "VpcId": { "Ref": "VPC" },
          "InternetGatewayId": { "Ref": "InternetGateway" }
        }
      },
      "PublicRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": { "Ref": "VPC" }
        }
      },
      "PublicRoute": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "RouteTableId": { "Ref": "PublicRouteTable" },
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": { "Ref": "InternetGateway" }
        }
      },
      "SubnetA": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": { "Ref": "VPC" },
          "CidrBlock": "10.0.1.0/24",
          "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": "" } ] },
          "MapPublicIpOnLaunch": true
        }
      },
      "SubnetB": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": { "Ref": "VPC" },
          "CidrBlock": "10.0.2.0/24",
          "AvailabilityZone": { "Fn::Select": [ "1", { "Fn::GetAZs": "" } ] },
          "MapPublicIpOnLaunch": true
        }
      },
      "SubnetARouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": { "Ref": "SubnetA" },
          "RouteTableId": { "Ref": "PublicRouteTable" }
        }
      },
      "SubnetBRouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": { "Ref": "SubnetB" },
          "RouteTableId": { "Ref": "PublicRouteTable" }
        }
      },
      "InstanceSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Enable HTTP and SSH",
          "VpcId": { "Ref": "VPC" },
          "SecurityGroupIngress": [
            { "IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "CidrIp": "0.0.0.0/0" },
            { "IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "CidrIp": "0.0.0.0/0" }
          ]
        }
      },
      "LaunchTemplate": {
        "Type": "AWS::EC2::LaunchTemplate",
        "Properties": {
          "LaunchTemplateData": {
            "InstanceType": "t3.micro",
            "ImageId": { "Fn::Sub": "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}" },
            "SecurityGroupIds": [ { "Ref": "InstanceSecurityGroup" } ],
            "UserData": {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash\n",
                    "yum update -y\n",
                    "yum install -y httpd\n",
                    "systemctl enable httpd\n",
                    "systemctl start httpd\n",
                    "echo '<h1>Hello from AutoScaling Instance</h1>' > /var/www/html/index.html\n"
                  ]
                ]
              }
            }
          }
        }
      },
      "TargetGroup": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties": {
          "VpcId": { "Ref": "VPC" },
          "Port": 80,
          "Protocol": "HTTP",
          "TargetType": "instance",
          "HealthCheckProtocol": "HTTP",
          "HealthCheckPath": "/",
          "HealthCheckIntervalSeconds": 30,
          "HealthyThresholdCount": 2,
          "UnhealthyThresholdCount": 5,
          "Matcher": { "HttpCode": "200" }
        }
      },
      "LoadBalancer": {
        "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties": {
          "Subnets": [ { "Ref": "SubnetA" }, { "Ref": "SubnetB" } ],
          "SecurityGroups": [ { "Ref": "InstanceSecurityGroup" } ],
          "Scheme": "internet-facing"
        }
      },
      "Listener": {
        "Type": "AWS::ElasticLoadBalancingV2::Listener",
        "Properties": {
          "DefaultActions": [
            {
              "Type": "forward",
              "TargetGroupArn": { "Ref": "TargetGroup" }
            }
          ],
          "LoadBalancerArn": { "Ref": "LoadBalancer" },
          "Port": 80,
          "Protocol": "HTTP"
        }
      },
      "AutoScalingGroup": {
        "Type": "AWS::AutoScaling::AutoScalingGroup",
        "Properties": {
          "VPCZoneIdentifier": [ { "Ref": "SubnetA" }, { "Ref": "SubnetB" } ],
          "MinSize": "2",
          "MaxSize": "5",
          "DesiredCapacity": "2",
          "TargetGroupARNs": [ { "Ref": "TargetGroup" } ],
          "LaunchTemplate": {
            "LaunchTemplateId": { "Ref": "LaunchTemplate" },
            "Version": { "Fn::GetAtt": [ "LaunchTemplate", "LatestVersionNumber" ] }
          },
          "HealthCheckType": "ELB",
          "HealthCheckGracePeriod": 120
        }
      },
      "CPUScaleOutPolicy": {
        "Type": "AWS::AutoScaling::ScalingPolicy",
        "Properties": {
          "AutoScalingGroupName": { "Ref": "AutoScalingGroup" },
          "PolicyType": "TargetTrackingScaling",
          "TargetTrackingConfiguration": {
            "PredefinedMetricSpecification": {
              "PredefinedMetricType": "ASGAverageCPUUtilization"
            },
            "TargetValue": 60.0
          }
        }
      },
      "CPUScaleInPolicy": {
        "Type": "AWS::AutoScaling::ScalingPolicy",
        "Properties": {
          "AutoScalingGroupName": { "Ref": "AutoScalingGroup" },
          "PolicyType": "TargetTrackingScaling",
          "TargetTrackingConfiguration": {
            "PredefinedMetricSpecification": {
              "PredefinedMetricType": "ASGAverageCPUUtilization"
            },
            "TargetValue": 30.0
          }
        }
      }
    },
    "Outputs": {
      "LoadBalancerDNS": {
        "Description": "URL of the application",
        "Value": { "Fn::GetAtt": [ "LoadBalancer", "DNSName" ] }
      }
    }
  }
  
